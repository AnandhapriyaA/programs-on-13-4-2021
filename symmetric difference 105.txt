import java.util.Scanner;
import java.util.Arrays;
import java.util.ArrayList;
public class mains extends UserMainCode {
	public static void main(String[] args) {
		Scanner scanner = new Scanner(System.in);
		System.out.println("enter length1");
		int len1 = scan.nextInt();
		System.out.println("enter array1");
		int[] array1 = new int[len1];
		for (int i = 0; i < len1; i++) {
			array1[i] = scan.nextInt();
		}
		System.out.println("enter length2");
		int len2 = scan.nextInt();
		System.out.println("enter array2");
		int[] array2 = new int[len2];
		for (int i = 0; i < len2; i++) {
			array2[i] = scan.nextInt();
		}
		getSymmetricDifference(array1, array2);
		scan.close();
	}
}
public class UserMainCode {
	public static int[] getSymmetricDifference(int[] array1, int[] array2) {
		int[] union, inter, result;
		int count = 0;
		int max = array1.length + array2.length;
		ArrayList<Integer> temp = new ArrayList<Integer>(max);
		for (int i = 0; i < array1.length; i++) {
			if (!temp.contains(array1[i])) {
				++count;
				temp.add(array1[i]);
			}
		}
		for (int i = 0; i < array2.length; i++) {
			if (!temp.contains(array2[i])) {
				++count;
				temp.add(array2[i]);
			}
		}
		union = new int[count];
		for (int i = 0; i < count; i++) {
			union[i] = (int) temp.get(i);
		}
		Arrays.sort(union);
		temp = new ArrayList<Integer>(max);
		count = 0;
		Arrays.sort(array2);
		for (int i = 0; i < array1.length; i++) {
			if (Arrays.binarySearch(array2, array1[i]) >= 0) {
				++count;
				temp.add(array1[i]);
			}
		}
		inter = new int[count];
		for (int i = 0; i < count; i++) {
			inter[i] = (int) temp.get(i);
		}
		Arrays.sort(inter);
		temp = new ArrayList<Integer>(max);
		count = 0;
		Arrays.sort(inter);
		for (int i = 0; i < union.length; i++) {
			if (Arrays.binarySearch(inter, union[i]) < 0) {
				++count;
				temp.add(union[i]);
			}
		}
		result = new int[count];
		for (int i = 0; i < count; i++) {
			result[i] = (int) temp.get(i);
		}
		Arrays.sort(result);
		for (int j = 0; j < result.length; j++)
			System.out.println(result[j]);
		return result;
	}
}
